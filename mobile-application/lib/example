class Example extends StatefulWidget {
  const Example({Key? key}) : super(key: key);

  @override
  State<Example> createState() => _ExampleState();
}

class _ExampleState extends State<Example> with SingleTickerProviderStateMixin {
  AnimationController? controller;

  String filepath = "";
  bool readOnly = false;
  @override
  void initState() {
    controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 600),
    );

    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: SafeArea(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            filepath != ""
                ? Expanded(
                    child: Column(
                      children: [
                        VoiceMessage(
                          audioSrc: filepath,
                          me: true,
                        ),
                      ],
                    ),
                  )
                : Expanded(child: Container()),
            Row(
              children: [
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.only(left: 19),
                    child: Container(
                      height: 55,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Colors.white.withOpacity(0.2),
                      ),
                      child: Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 20),
                        child: TextField(
                          readOnly: readOnly,
                          maxLines: null,
                          decoration: InputDecoration(
                            border: InputBorder.none,
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 4),
                RecordButton(
                  color: Colors.black,
                  allTextColor: Colors.white,
                  controller: controller!,
                  arrowColor: Colors.white,
                  releaseToSend: true,
                  onRecordEnd: (String value) {
                    setState(() {
                      filepath = value;
                      readOnly = false;
                    });
                  },
                  onRecordStart: () {
                    setState(() {
                      readOnly = true;
                    });
                  },
                  onCancelRecord: () {
                    setState(() {
                      readOnly = false;
                    });
                  },
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}